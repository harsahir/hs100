Read the script below and answer the following question.



#!/usr/bin/env python3
 
import time
 
class PyTimer:
 
    def __init__(self, minute, second):
        try:
            self.minute = int(minute)
            self.second = int(second)
        except TypeError:
            print('Please enter a valid time')
            self.minute = 0
            self.second = 0
 
    def display_time(self):       
       return f'{self.minute:02d}:{self.second:02d}'
 
    def __sub__(self, other):
       self.second += 60       
        self.second -= int(other)
        if self.second < 60:
   self.minute -= 1
       else:
            self.second -= 60
 
    def times_up(self):
        if self.second == 0 and self.minute == 0:
            return True
        else:
            return False
 
if __name__ == "__main__":
    t1 = PyTimer(2, 0)
    while t1.times_up() != True:
      t1 - 1
        print(t1.display_time())
        time.sleep(1)


Write down the order in which PyTimer's methods are called.



The order in which the methods of the `PyTimer` class are called in the script is as follows:

1. **`__init__` Method**: This method is called when the `PyTimer` instance `t1` is created with `t1 = PyTimer(2, 0)`. It initializes the timer with 2 minutes and 0 seconds.

2. **`times_up` Method**: This method is called repeatedly in the `while` loop condition `while t1.times_up() != True:` to check if the timer has reached zero.

3. **`__sub__` Method**: This method is called by the line `t1 - 1` within the loop. It is intended to decrement the timer by 1 second.

4. **`display_time` Method**: This method is called within the loop with `print(t1.display_time())` to display the current time of the timer in the format "MM:SS".

The script loops through these method calls until the `times_up` method returns `True`, indicating that the timer has reached zero.
